#! /usr/bin/python
# -*- coding: UTF-8 -*-
# vim: et ts=4 sw=4

# Copyright © 2010 Piotr Ożarowski <piotr@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import with_statement
import logging
import optparse
import sys
from os import environ, listdir, mkdir, walk
from os.path import abspath, dirname, exists, isdir, isfile, join
from subprocess import PIPE, Popen
sys.path.insert(1, '/usr/share/python/')
from debpython.version import SUPPORTED, debsorted, vrepr, \
        get_requested_versions, parse_vrange
from debpython.option import Option, compile_regexpr

# initialize script
logging.basicConfig(format='%(levelname).1s: %(module)s:%(lineno)d: '
                           '%(message)s')
log = logging.getLogger('pycompile')
# TODO: /usr/share/python3/foo/3.1-/bar/-3.5/baz.py
STDINS = {}

"""TODO: move it to manpage
Examples:
    pycompile -p python-mako # package's public files
    pycompile -p foo /usr/share/foo # package's private files
    pycompile -p foo -V 2.6- /usr/share/foo # private files, Python >= 2.6
    pycompile -V 2.6 /usr/lib/python2.6/dist-packages # python2.6 only
    pycompile -V 2.6 /usr/lib/foo/bar.py # python2.6 only
"""


### FILES ######################################################
def get_directory_files(dname):
    """Generate *.py file names available in given directory."""
    if isfile(dname) and dname.endswith('.py'):
        yield dname
    else:
        for root, dirs, file_names in walk(abspath(dname)):
            #if root != dname and not exists(join(root, '__init__.py')):
            #    del dirs[:]
            #    continue
            for fn in file_names:
                if fn.endswith('.py'):
                    yield join(root, fn)


def get_package_files(package_name):
    """Generate *.py file names available in given package."""
    process = Popen("/usr/bin/dpkg -L %s" % package_name, shell=True,\
                    stdout=PIPE, stderr=PIPE)
    if process.wait() != 0:
        log.error('cannot get content of %s', package_name)
        sys.exit(2)
    for line in process.stdout:
        line = line.strip('\n')
        if line.endswith('.py'):
            yield line


def get_private_files(files, dname):
    """Generate *.py file names that match given directory."""
    for fn in files:
        if fn.startswith(dname):
            yield fn


def get_public_files(files, versions):
    """Generate *.py file names that match given versions."""
    versions_str = set("%d.%d" % i for i in versions)
    for fn in files:
        if fn.startswith('/usr/lib/python') and \
           fn[15:18] in versions_str:
            yield fn


### EXCLUDES ###################################################
def get_exclude_patterns_from_dir(name='/usr/share/python/bcep/'):
    """Return patterns for files that shouldn't be bytecompiled."""
    if not isdir(name):
        return []

    global _exclude_patterns
    if _exclude_patterns is not None:  # use cache if available
        return _exclude_patterns

    _exclude_patterns = []
    for fn in listdir(name):
        with file(join(name, fn), 'r') as lines:
            for line in lines:
                type_, vrange, dname, pattern = line.split('|', 3)
                vrange = parse_vrange(vrange)
                versions = get_requested_versions(vrange, available=True)
                if not versions:
                    # pattern doesn't match installed Python versions
                    continue
                pattern = pattern.rstrip('\n')
                if type_ == 're':
                    pattern = compile_regexpr(None, None, pattern)
                _exclude_patterns.append((type_, versions, dname, pattern))
    return _exclude_patterns
_exclude_patterns = None


def get_exclude_patterns(directory='/', patterns=None, versions=None):
    """Return patterns for files that shouldn't be compiled in given dir."""
    if patterns:
        if versions is None:
            versions = set(SUPPORTED)
        patterns = [('re', versions, directory, i) for i in patterns]
    else:
        patterns = []

    for type_, vers, dname, pattern in get_exclude_patterns_from_dir():
        # skip patterns that do not match requested directory
        if not dname.startswith(directory[:len(dname)]):
            continue
        # skip patterns that do not match requested versions
        if versions and not versions & vers:
            continue
        patterns.append((type_, vers, dname, pattern))
    return patterns


def filter_files(files, e_patterns, compile_versions):
    """Generate (file, versions_to_compile) pairs."""
    for fn in files:
        valid_versions = set(compile_versions)  # all by default

        for type_, vers, dname, pattern in e_patterns:
            if type_ == 'dir' and fn.startswith(dname):
                valid_versions = valid_versions - vers
            elif type_ == 're' and pattern.match(fn):
                valid_versions = valid_versions - vers

            # move to the next file if all versions were removed
            if not valid_versions:
                break
        if valid_versions:
            yield fn, valid_versions


### COMPILE ####################################################
def py_compile(version):
    if not isinstance(version, basestring):
        version = vrepr(version)
    cmd = "python%s -m py_compile -" % version
    #if pyr_mode:
    #    cmd += ' -R'
    stdin = Popen(cmd, bufsize=1, shell=True, stdin=PIPE).stdin
    while True:
        filename = (yield)
        stdin.write(filename + '\n')


def compile(files, versions, pyr_mode=False, e_patterns=None):
    global STDINS
    # start Python interpreters that will handle byte compilation
    for version in versions:
        if (version, pyr_mode) not in STDINS:
            coroutine = py_compile(version)
            coroutine.next()
            STDINS[(version, pyr_mode)] = coroutine

    skip_dirs = set()
    # byte compile files
    for fn, versions_to_compile in filter_files(files, e_patterns, versions):
        if not pyr_mode and exists("%sc" % fn):
            continue
        elif pyr_mode:
            pycache_dir = join(dirname(fn), '__pycache__')
            if pycache_dir not in skip_dirs and not exists(pycache_dir):
                try:
                    mkdir(pycache_dir)
                except Exception, e:
                    log.error("cannot create directory %s: %r", pycache_dir, e)
                    skip_dirs.add(pycache_dir)
                    continue
        for version in versions_to_compile:
            pipe = STDINS[(version, pyr_mode)]
            pipe.send(fn)


################################################################
def doctest(*args, **kwargs):
    import doctest
    sys.exit(doctest.testmod())


def main():
    usage = '%prog [-V [X.Y][-][A.B]] DIR_OR_FILE [-X REGEXPR]\n' + \
     '       %prog -p PACKAGE'
    parser = optparse.OptionParser(usage, version='%prog 0.1',
                                   option_class=Option)
    parser.add_option('--doctest', action='callback', callback=doctest,
        help=optparse.SUPPRESS_HELP)
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
        default=False, help='turn verbose more one')
    parser.add_option('-q', '--quiet', action='store_false', dest='verbose',
        default=True, help='be quiet')
    parser.add_option('-p', '--package',
        help='specify Debian package name whose files should be bytecompiled')
    parser.add_option('-V', type='version_range', dest='vrange',
        help="""force private modules to be bytecompiled with Python version
from given range, regardless of the default Python version in the system.
If there are no other options, bytecompile all public modules for installed
Python versions that match given range.

VERSION_RANGE examples: '2.5' (version 2.5 only), '2.5-' (version 2.5 or
newer), '2.5-2.7' (version 2.5 or 2.6), '-3.0' (all supported 2.X versions)""")
    parser.add_option('-X', '--exclude', action='append',
        dest='regexpr', type='regexpr',
        help='exclude items that match given REGEXPR. You may use this option \
multiple times to build up a list of things to exclude.')
    parser.add_option('-R', action='store_true', default=False,
        dest='pyr_mode', help='PEP 3147 mode')

    (options, args) = parser.parse_args()

    if options.verbose:
        log.setLevel(logging.INFO)
    if environ.get('PYCOMPILE_DEBUG') == '1':
        log.setLevel(logging.DEBUG)
        log.debug('argv: %s', sys.argv)
        log.debug('options: %s', options)
        log.debug('args: %s', args)

    if options.regexpr and not args:
        parser.error('--exclude option works with private directories '
            'only, please use /usr/share/python/bcep to specify '
            'public modules to skip')

    versions = get_requested_versions(options.vrange, available=True)
    if not versions:
        log.error('Requested versions are not installed')
        sys.exit(3)

    if options.package and args:  # package's private directories
        # get requested Python version
        if not options.pyr_mode:
            compile_versions = debsorted(versions)[:1]
        else:
            compile_versions = versions
        log.debug('compile versions: %s', versions)

        pkg_files = tuple(get_package_files(options.package))
        for item in args:
            e_patterns = get_exclude_patterns(item, options.regexpr,\
                                              compile_versions)
            if not exists(item):
                log.warn('No such file or directory: %s', item)
            else:
                log.debug('byte compiling %s using Python %s',
                          item, compile_versions)
                files = get_private_files(pkg_files, item)
                compile(files, compile_versions, options.pyr_mode, e_patterns)
    elif options.package:  # package's public modules
        # no need to limit versions here, it's either pyr mode or version is
        # hardcoded in path / via -V option
        e_patterns = get_exclude_patterns()
        files = get_package_files(options.package)
        files = get_public_files(files, versions)
        compile(files, versions, options.pyr_mode, e_patterns)
    elif args:  # other directories/files (public ones mostly)
        if not options.pyr_mode:
            versions = debsorted(versions)[:1]
        for item in args:
            e_patterns = get_exclude_patterns(item, options.regexpr, versions)
            files = get_directory_files(item)
            compile(files, versions, options.pyr_mode, e_patterns)
    else:
        parser.print_usage()
        sys.exit(1)


if __name__ == '__main__':
    main()
